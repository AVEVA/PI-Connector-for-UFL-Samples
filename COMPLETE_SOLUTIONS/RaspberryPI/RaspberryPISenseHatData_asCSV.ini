' ***** NOTE:
' ***** This is an alternative .INI file that assumes that data is being sent as a CSV message, such that the message structure is:
' ***** elementName,templateName,timestamp,dataItemName1,dataItemValue1,dataItemName2,dataItemValue2,dataItemName3,dataItemValue3,dataItemName4,dataItemValue4

'---------------------------------------------------------------------------
' Define all of the fields that will be parsed from the incoming data

[FIELD]
' Don't modify this first field; it is an internal field that doesn't map directly to any of the items in the message; instead, 
' this field is used as a variable that will later contain all of the PI AF attributes that will be added to the PI AF Element template
FIELD(1).Name = "attributesCollection"
FIELD(1).Type = "Collection"

' The first fields are the element name and template name
Field(2).NAME = "elementName"
Field(3).NAME = "templateName"

' The next field is the timestamp of the incoming data
Field(4).NAME = "timestamp"
Field(4).TYPE = "DateTime"
Field(4).FORMAT = "yyyy-MM-ddThh:mm:ssZ"

' The next however many fields come in pairs, with the first item in the pair being the name of the data item (which is always of type "String")
' and the second item being the value of that data item.  Make sure to properly specify the types of the data item values ("Number" or "String")!
' In the example, value1 corresponds to the temperature and value2 to the pressure, and value3 is the level.
Field(7).NAME = "dataItemName1"
Field(8).NAME = "dataItemValue1"
Field(8).TYPE = "Number"
Field(9).NAME = "dataItemName2"
Field(10).NAME = "dataItemValue2"
Field(10).TYPE = "Number"
Field(11).NAME = "dataItemName3"
Field(12).NAME = "dataItemValue3"
Field(12).TYPE = "Number"
Field(13).NAME = "dataItemName4"
Field(14).NAME = "dataItemValue4"
Field(14).TYPE = "Number"

' If you had another data item in your CSV message, you would add fields for it below like so, using the above as an example:
'Field(15).NAME = "dataItemName5"
'Field(16).NAME = "dataItemValue5"
'Field(16).TYPE = "Number"

'---------------------------------------------------------------------------
' Next we'll define a mask and filter to allow the PI Connector to properly parse through the CSV message and ultimately populated
' the fields that were just defined above

[MSG]
MSG(1).NAME = "CSVMessage"

[CSVMessage]
' If you wanted to, you could apply a filter to only accept messages that start with a certain prefix, but in this case,
' we will let all incoming messages be parsed by using a wild card "*" filter
CSVMessage.FILTER = C1=="*"

' Clear the attributes collection (initialize it)
attributesCollection = Clear()

' After performing the above filter, extract the desired fields from the CSV;
' In the below operation, each asterisk represents one of the comma-separated items in an incoming message;
' the parentheses are used to select a particular one of those items so that its value can be assigned to a field (such as the elementName)

elementName 		= 	["(*),*,*,*,*,*,*,*,*,*,*"]
templateName	 	= 	["*,(*),*,*,*,*,*,*,*,*,*"]
timestamp 			= 	["*,*,(*),*,*,*,*,*,*,*,*"]
dataItemName1		=	["*,*,*,(*),*,*,*,*,*,*,*"]
dataItemValue1		= 	["*,*,*,*,(*),*,*,*,*,*,*"]
dataItemName2		=	["*,*,*,*,*,(*),*,*,*,*,*"]
dataItemValue2		= 	["*,*,*,*,*,*,(*),*,*,*,*"]
dataItemName3		=	["*,*,*,*,*,*,*,(*),*,*,*"]
dataItemValue3		= 	["*,*,*,*,*,*,*,*,(*),*,*"]
dataItemName4		=	["*,*,*,*,*,*,*,*,*,(*),*"]
dataItemValue4		= 	["*,*,*,*,*,*,*,*,*,*,(*)"]

' Next, take actions: for each dataItemName and dataItemValue, store those in the PI System using the "StoreEvent" function
' Specifically, create a PI Point called elementName + "_" + dataItemNameXXX, 
' associate that Point with the PI AF Attribute called dataItemNameXXX, and 
' write a new data event with the timestamp equal to the timestamp variable  and the value equal to dataItemValueXXX
StoreEvent(elementName + "_" + dataItemName1, dataItemName1, timestamp, dataItemValue1)
StoreEvent(elementName + "_" + dataItemName2, dataItemName2, timestamp, dataItemValue2)
StoreEvent(elementName + "_" + dataItemName3, dataItemName3, timestamp, dataItemValue3)
StoreEvent(elementName + "_" + dataItemName4, dataItemName4, timestamp, dataItemValue4)

' Having created PI Points, associated them with PI AF Attributes, and written the data values, add those PI Points 
' (whose names are in the format elementName + "_" + dataItemNameXXX)) to an Attribute collection 
' that belongs to (or will be used to create) a PI AF Element template
attributesCollection = Add(elementName + "_" + dataItemName1)
attributesCollection = Add(elementName + "_" + dataItemName2)
attributesCollection = Add(elementName + "_" + dataItemName3)
attributesCollection = Add(elementName + "_" + dataItemName4)

' If it doesn't exist already, that Attributes collection will be used to create a new PI AF Element template

' Create a new PI AF Element, with a name equal to the elementName field, using (or creating) the PI AF Element Template
' with the name specified above, which has within it the PI AF Attributes collection populated earlier
StoreElement(elementName, templateName, attributesCollection)