'---------------------------------------------------------------------------
' Define all of the fields that will be parsed from the incoming data

[FIELD]
' The timestamp of the incoming data
Field(1).NAME = "Timestamp"
Field(1).TYPE = "DateTime"
Field(1).FORMAT = "yyyy-MM-dd hh:mm:ss"

' The unique name of the device that is sending this data
Field(2).NAME = "DeviceName"

' The name of the sensor that is sending a given value; this will be used to name a PI AF attribute
Field(3).NAME = "SensorName"

' The value of the sensor named above; first, the raw string will be parsed, then it'll be trimmed and cleaned
Field(4).NAME = "SensorValueRaw"
Field(4).TYPE = "String"
FIELD(5).NAME = "SensorValue"
FIELD(5).TYPE = "Number"

' A collection of all of the PI AF attributes that will be added to this PI AF Element template
FIELD(6).Name = "AttributesCollection"
FIELD(6).Type = "Collection"

' The name of the PI AF Element template to use when creating new elements
FIELD(7).Name = "PIAFElementTemplateName"
'---------------------------------------------------------------------------
' Each "MSG" (message) defines a separate pass through the incoming data, and in each pass,
' different fields (listed above) are extracted, using a different filter expression for each message. 
' After each message, actions may be taken, such as storing values in the PI System. 
' In this case, define three messages, which will extract the timestamp, device name, and sensor name and value

[MSG]
MSG(1).NAME = "TimestampMessage"
MSG(2).NAME = "DeviceNameMessage"
MSG(3).NAME = "SensorNameAndValueMessage"

[TimestampMessage]
TimestampMessage.FILTER = C1=="*\"time\"*"
' After performing the above filter, extract the desired field(s)
Timestamp = ["*time\": \"(*)\","]

' There aren't any actions listed before the next message;
' thus, simply continue to the other message type(s)

[DeviceNameMessage]
DeviceNameMessage.FILTER = C1=="*device*"
' After performing the above filter, extract the desired field(s)
DeviceName = ["*device\": \"(*)\""]
StoreElement(DeviceName)

' There aren't any actions listed before the next message;
' thus, simply continue to the other message type(s)

[SensorNameAndValueMessage]
SensorNameAndValueMessage.FILTER = C1=="  *"
' After performing the above filter, extract the desired field(s)
SensorName = ["*\"(*)\"*"]
' Extract the numeric value up to, but not including, the last non-numeric character the end of the line
SensorValueRaw = C1(":??") - C1("[!0123456789]")
' Remove excess commas and quotes.
SensorValueRaw = REPLACE(SensorValueRaw, "\"", "")
SensorValue = REPLACE(SensorValueRaw, ",", "")

' This message type will pick up multiple lines that match the filter expression and matching pattern.
' At this point, all of the fields have been properly extracted!
' Next, take actions: for each SensorName and SensorValue, store those in the PI System using the "StoreEvent" function
' Specifically, create a PI Point called DeviceName + "_" + SensorName, associate it with the PI AF Attribute called SensorName, and 
' write a new data event with the timestamp equal to Timestamp and the value equal to SensorValue
StoreEvent(DeviceName + "_" + SensorName, SensorName, Timestamp, SensorValue)

' Having created PI Points, associated them with PI AF Attributes, and written the sensor data, add those PI Points 
' (which now have associated Attribute names) to an Attribute collection 
' that belongs to (or will be used to create) a PI AF Element template
AttributesCollection = Add(DeviceName + "_" + SensorName)

' If it doesn't exist already, that Attributes collection will be used to create a new PI AF Element template;
' first, give that new AF Element Template a name
PIAFElementTemplateName = "Generic IoT Device Template"

' Create a new PI AF Element, with a name equal to the DeviceName field, using (or creating) the PI AF Element Template
' with the name specified above, which has within it the PI AF Attributes collection populated earlier
StoreElement(DeviceName, PIAFElementTemplateName, AttributesCollection)