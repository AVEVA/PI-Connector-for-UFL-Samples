[FIELD]
Field(1).NAME = "Timestamp"
Field(1).TYPE = "DateTime"
Field(1).FORMAT = "yyyy-MM-ddThh:mm:ssZ"

Field(2).NAME = "Value1"
Field(2).TYPE = "Number"

Field(3).NAME = "Value2"
Field(3).TYPE = "Number"

Field(4).NAME = "Value3"
Field(4).TYPE = "Number"

Field(5).NAME = "Value4"
Field(5).TYPE = "Number"

Field(6).NAME = "DynamicAttributes"
Field(6).TYPE = "Collection"

Field(7).NAME = "StaticAttributes"
Field(7).TYPE = "Collection"

Field(8).NAME = "Device"

Field(9).NAME = "Element"

Field(10).NAME = "SensorName1"
Field(10).TYPE = "String"

Field(11).NAME = "SensorName2"
Field(11).TYPE = "String"

Field(12).NAME = "SensorName3"
Field(12).TYPE = "String"

Field(13).NAME = "SensorName4"
Field(13).TYPE = "String"

Field(14).NAME = "SensorName5"
Field(14).TYPE = "String"

Field(15).NAME = "SensorName6"
Field(15).TYPE = "String"

Field(16).NAME = "SensorName7"
Field(16).TYPE = "String"

Field(17).NAME = "SensorName8"
Field(17).TYPE = "String"

Field(18).NAME = "Value5"
Field(18).TYPE = "Number"

Field(19).NAME = "Value6"
Field(19).TYPE = "Number"

Field(20).NAME = "Value7"
Field(20).TYPE = "Number"

Field(21).NAME = "Value8"
Field(21).TYPE = "Number"

'---------------------------------------------------------------------------

' A configuration file can have multiple types of data; in this case,
' we will only use one type of data, and here we'll name it "Data"
 
[MSG]
MSG(1).NAME = "Header"
MSG(2).Name = "Data"

SensorName1 = [H (*),*"]
SensorName2 = [H *,(*),*"]


[Header]
Data.FILTER = C1=="H *"
'---------------------------------------------------------------------------

' Set up a filter, if necessary, to only parse certain lines; in this case,
' we will parse all lines from the data message
' The data will be of the form
' {"d":"Qualcomm DragonBoard 1701","t":"2016-03-24T15:50:52Z","Latitude":30.207599639892578,"Longitude":-97.85870361328125,"CPU Usage":1.767676767676761,"Disk Busy Time":0.0,"RAM In Use":350019584,"RAM Total":936828928,"Wi-Fi Card Bits Received":247854808,"Wi-Fi Card Bits Sent":50762112}
' Where the first item, d, is the device identifier, the second item is the timestamp, 
' in format yyyy-MM-ddThh:mm:ss.nnn, and the next four items, v1 through v4, are sensor names and sensor readings
 
[Data]
Data.FILTER = C1=="*"

' Instruct the interface how to parse the text: specifically, how to locate
' the different data fields that were specified above in the [FIELD] section

Device = C1("{*:?") - C1("?,")
Timestamp = C1("{*:*,*:?") - C1("?,")

Value1 = C1("{*:*,*:*,*:") - C1(",")
Value2 = C1("{*:*,*:*,*:*,*:") - C1(",")
Value3 = C1("{*:*,*:*,*:*,*:*,*:") - C1(",")
Value4 = C1("{*:*,*:*,*:*,*:*,*:*,*:") - C1(",")
Value5 = C1("{*:*,*:*,*:*,*:*,*:*,*:*,*:") - C1(",")
Value6 = C1("{*:*,*:*,*:*,*:*,*:*,*:*,*:*,*:") - C1(",")
Value7 = C1("{*:*,*:*,*:*,*:*,*:*,*:*,*:*,*:*,*:") - C1(",")
Value8 = C1("{*:*,*:*,*:*,*:*,*:*,*:*,*:*,*:*,*:*,*:") - C1("}")

                            SensorName1=C1("{*:*,*:*,*?") - C1("?:")
                        SensorName2=C1("{*:*,*:*,*:*,*?") - C1("?:")
                    SensorName3=C1("{*:*,*:*,*:*,*:*,*?") - C1("?:")
                SensorName4=C1("{*:*,*:*,*:*,*:*,*:*,*?") - C1("?:")
            SensorName5=C1("{*:*,*:*,*:*,*:*,*:*,*:*,*?") - C1("?:")
        SensorName6=C1("{*:*,*:*,*:*,*:*,*:*,*:*,*:*,*?") - C1("?:")
    SensorName7=C1("{*:*,*:*,*:*,*:*,*:*,*:*,*:*,*:*,*?") - C1("?:")
SensorName8=C1("{*:*,*:*,*:*,*:*,*:*,*:*,*:*,*:*,*:*,*?") - C1("?:")

'---------------------------------------------------------------------------

' Instruct the Connector to store the field values in PI points named Device + ":" + "Value XXX"
' And to create those PI points if they don't exist

StoreEvent( Device + ":" + SensorName1, SensorName1, Timestamp, Value1 )
StoreEvent( Device + ":" + SensorName2, SensorName2, Timestamp, Value2 )
StoreEvent( Device + ":" + SensorName3, SensorName3, Timestamp, Value3 )
StoreEvent( Device + ":" + SensorName4, SensorName4, Timestamp, Value4 )
StoreEvent( Device + ":" + SensorName5, SensorName5, Timestamp, Value5 )
StoreEvent( Device + ":" + SensorName6, SensorName6, Timestamp, Value6 )
StoreEvent( Device + ":" + SensorName7, SensorName7, Timestamp, Value7 )
StoreEvent( Device + ":" + SensorName8, SensorName8, Timestamp, Value8 )

'---------------------------------------------------------------------------

' In this case, in addition to live data, the Connector can also receive
' static values--such as serial numbers.  In our case, we will have one
' static identifier that will be sent with each message, which is the identifier
' string for each device.  That will be stored in an attribute called "Device".

StaticAttributes = Clear()
StaticAttributes = Add( "Device", Device )

' We'll next instruct the Connector to associate the above PI points with the new PI AF element

DynamicAttributes = Clear()
DynamicAttributes = Add( Device + ":" + SensorName1 )
DynamicAttributes = Add( Device + ":" + SensorName2 )
DynamicAttributes = Add( Device + ":" + SensorName3 )
DynamicAttributes = Add( Device + ":" + SensorName4 )
DynamicAttributes = Add( Device + ":" + SensorName5 )
DynamicAttributes = Add( Device + ":" + SensorName6 )
DynamicAttributes = Add( Device + ":" + SensorName7 )
DynamicAttributes = Add( Device + ":" + SensorName8 )

'---------------------------------------------------------------------------

' Next, create a parent PI AF Element called "Devices", under which all of the new elements 
' will be created (this is optional, but helps with organization)

Element = "Devices"
StoreElement( Element )

'---------------------------------------------------------------------------

' Finally, instruct the Connector to create a new AF Element, using this new template,
' with all of the above static and dynamic attributes,
' when it receives a new post that contains a unique device identifier
' Note: CHAR(92) = ASCII code for backslash \

StoreElement( Element + CHAR(92) + Device, "IoT Device Template", DynamicAttributes, StaticAttributes )